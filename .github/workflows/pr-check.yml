name: PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      tests: ${{ steps.filter.outputs.tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'src/**'
              - 'public/**'
              - 'index.html'
              - 'vite.config.ts'
              - 'tsconfig.json'
              - 'package.json'
              - 'pnpm-lock.yaml'
            backend:
              - 'functions/**'
              - 'migrations/**'
              - 'wrangler.toml'
              - 'src/worker.ts'
            tests:
              - 'src/**/*.spec.ts'
              - 'src/**/*.test.ts'
              - 'e2e/**'
              - 'vitest.config.ts'
              - 'playwright.config.ts'

  test-unit:
    name: Unit Tests
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: pnpm test:coverage run

      - name: Comment coverage on PR
        uses: davelosert/vitest-coverage-report-action@v2
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ./

  test-e2e:
    name: E2E Tests - ${{ matrix.browser }}
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: pnpm build

      - name: Run E2E tests
        run: pnpm test:e2e --project=${{ matrix.browser }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

  typecheck:
    name: Type Check
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript check
        run: pnpm typecheck

  build:
    name: Build Check
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Check build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed - dist directory not found"
            exit 1
          fi
          echo "Build successful - checking file sizes"
          ls -la dist/

  pr-status:
    name: PR Status Check
    needs: [test-unit, test-e2e, typecheck, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check overall status
        run: |
          echo "## PR Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job status
          if [[ "${{ needs.test-unit.result }}" == "success" ]]; then
            echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-unit.result }}" == "skipped" ]]; then
            echo "⏭️ Unit Tests: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test-e2e.result }}" == "success" ]]; then
            echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-e2e.result }}" == "skipped" ]]; then
            echo "⏭️ E2E Tests: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.typecheck.result }}" == "success" ]]; then
            echo "✅ Type Check: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.typecheck.result }}" == "skipped" ]]; then
            echo "⏭️ Type Check: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Type Check: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Build: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build.result }}" == "skipped" ]]; then
            echo "⏭️ Build: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Fail if any required check failed
          if [[ "${{ needs.test-unit.result }}" == "failure" || 
                "${{ needs.test-e2e.result }}" == "failure" || 
                "${{ needs.typecheck.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **PR checks failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All PR checks passed**" >> $GITHUB_STEP_SUMMARY
          fi